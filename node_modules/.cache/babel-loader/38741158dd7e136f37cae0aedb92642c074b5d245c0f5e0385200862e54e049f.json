{"ast":null,"code":"var _jsxFileName = \"/home/lcom/Project/food-mall/src/components/Body/userOrders/UserOrder.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport \"./UserOrder.css\";\nimport { DataStore } from '../../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst slides = document.querySelectorAll(\".userslide\");\n\n// loop through slides and set each slides translateX\nslides.forEach((slide, indx) => {\n  slide.style.transform = `translateX(${indx * 100}%)`;\n});\n\n// current slide counter\nlet curSlide = 0;\n// maximum number of slides\nlet maxSlide = slides.length - 1;\nconsole.log(slides);\n\n// add event listener and navigation functionality\nconst btnNext = () => {\n  // check if current slide is the last and reset current slide\n  if (curSlide === maxSlide) {\n    curSlide = 0;\n  } else {\n    curSlide++;\n  }\n\n  //   move slide by -100%\n  slides.forEach((slide, indx) => {\n    slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;\n  });\n};\n\n// select next slide button\nconst prevSlide = () => {\n  // check if current slide is the first and reset current slide to last\n  if (curSlide === 0) {\n    curSlide = maxSlide;\n  } else {\n    curSlide--;\n  }\n  //   move slide by 100%\n  slides.forEach((slide, indx) => {\n    slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;\n  });\n};\nconst UserOrder = () => {\n  _s();\n  const ctx = useContext(DataStore);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slider myCssOnSlider\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: btnNext,\n      className: \"btnSlider btn-next\",\n      children: [\" \", \">\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: prevSlide,\n      className: \"btnSlider btn-prev\",\n      children: ['<', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(UserOrder, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n_c = UserOrder;\nexport default UserOrder;\nvar _c;\n$RefreshReg$(_c, \"UserOrder\");","map":{"version":3,"names":["React","useContext","DataStore","slides","document","querySelectorAll","forEach","slide","indx","style","transform","curSlide","maxSlide","length","console","log","btnNext","prevSlide","UserOrder","ctx"],"sources":["/home/lcom/Project/food-mall/src/components/Body/userOrders/UserOrder.jsx"],"sourcesContent":["import React, { useContext } from 'react'\nimport \"./UserOrder.css\"\nimport { DataStore } from '../../../App';\n\nconst slides = document.querySelectorAll(\".userslide\");\n\n// loop through slides and set each slides translateX\nslides.forEach((slide, indx) => {\n  slide.style.transform = `translateX(${indx * 100}%)`;\n});\n\n// current slide counter\nlet curSlide = 0;\n// maximum number of slides\nlet maxSlide = slides.length - 1;\nconsole.log(slides)\n\n// add event listener and navigation functionality\nconst btnNext = () => {\n  // check if current slide is the last and reset current slide\n  if (curSlide === maxSlide) {\n    curSlide = 0;\n  } else {\n    curSlide++;\n  }\n\n  //   move slide by -100%\n  slides.forEach((slide, indx) => {\n    slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;\n  });\n};\n\n// select next slide button\nconst prevSlide = () => {\n  // check if current slide is the first and reset current slide to last\n  if (curSlide === 0) {\n    curSlide = maxSlide;\n  } else {\n    curSlide--;\n  }\n  //   move slide by 100%\n  slides.forEach((slide, indx) => {\n    slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;\n  });\n};\n\nconst UserOrder = () => {\n   const ctx = useContext(DataStore)\n  return (\n    <div className=\"slider myCssOnSlider\">\n\n  {}\n\n  <button onClick={btnNext} className=\"btnSlider btn-next\"> {\">\"} </button>\n  <button onClick={prevSlide} className=\"btnSlider btn-prev\">\n    {'<'} </button>\n</div>\n  )\n}\n\nexport default UserOrder\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,iBAAiB;AACxB,SAASC,SAAS,QAAQ,cAAc;AAAC;AAEzC,MAAMC,MAAM,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,YAAY,CAAC;;AAEtD;AACAF,MAAM,CAACG,OAAO,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAK;EAC9BD,KAAK,CAACE,KAAK,CAACC,SAAS,GAAI,cAAaF,IAAI,GAAG,GAAI,IAAG;AACtD,CAAC,CAAC;;AAEF;AACA,IAAIG,QAAQ,GAAG,CAAC;AAChB;AACA,IAAIC,QAAQ,GAAGT,MAAM,CAACU,MAAM,GAAG,CAAC;AAChCC,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;;AAEnB;AACA,MAAMa,OAAO,GAAG,MAAM;EACpB;EACA,IAAIL,QAAQ,KAAKC,QAAQ,EAAE;IACzBD,QAAQ,GAAG,CAAC;EACd,CAAC,MAAM;IACLA,QAAQ,EAAE;EACZ;;EAEA;EACAR,MAAM,CAACG,OAAO,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAK;IAC9BD,KAAK,CAACE,KAAK,CAACC,SAAS,GAAI,cAAa,GAAG,IAAIF,IAAI,GAAGG,QAAQ,CAAE,IAAG;EACnE,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMM,SAAS,GAAG,MAAM;EACtB;EACA,IAAIN,QAAQ,KAAK,CAAC,EAAE;IAClBA,QAAQ,GAAGC,QAAQ;EACrB,CAAC,MAAM;IACLD,QAAQ,EAAE;EACZ;EACA;EACAR,MAAM,CAACG,OAAO,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAK;IAC9BD,KAAK,CAACE,KAAK,CAACC,SAAS,GAAI,cAAa,GAAG,IAAIF,IAAI,GAAGG,QAAQ,CAAE,IAAG;EACnE,CAAC,CAAC;AACJ,CAAC;AAED,MAAMO,SAAS,GAAG,MAAM;EAAA;EACrB,MAAMC,GAAG,GAAGlB,UAAU,CAACC,SAAS,CAAC;EAClC,oBACE;IAAK,SAAS,EAAC,sBAAsB;IAAA,wBAIvC;MAAQ,OAAO,EAAEc,OAAQ;MAAC,SAAS,EAAC,oBAAoB;MAAA,WAAC,GAAC,EAAC,GAAG,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAS,eACzE;MAAQ,OAAO,EAAEC,SAAU;MAAC,SAAS,EAAC,oBAAoB;MAAA,WACvD,GAAG,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACb;AAEN,CAAC;AAAA,GAZKC,SAAS;AAAA,KAATA,SAAS;AAcf,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}